<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="co.kr.fourteen.ese.login.mapper.EseLoginMapper">

	<!-- 주의사항
	이렇게 하나씩 대입되는 이름들을 맞춰주면 데이터를 잘 받아온다
	주의할 점은 이름이 다른 것들만 써주는 것이 아니라 써주려면 전부 다 써줘야 한다는 것 -->

	<sql id="selectUserWhere">
		WHERE USER_ID = #{userId }
	</sql>

	<select id="login" parameterType="co.kr.fourteen.ese.login.vo.EseLoginVo" resultType="co.kr.fourteen.ese.login.vo.EseLoginVo">
		SELECT	REGIST_NO
				, USER_ID
				, USER_PW
				, TMPR_PW_NO
				, USER_NM
				, USER_EMAIL
				, USER_PHONE
				, USER_FIRST_ADDR
				, USER_SECOND_ADDR
				, LAST_CONTACT_FMT_DT
			FROM USER_INFO
		<include refid="selectUserWhere" />

		/* co.kr.fourteen.ese.login.mapper.EseUserMapper */
	</select>

	<!-- 로그인 -->
	<select id="signIn" resultType="co.kr.fourteen.ese.login.vo.EseLoginVo">
		SELECT
			REGIST_NO
				, USER_ID
				, USER_PW
				, TMPR_PW_NO
				, USER_NM
				, USER_EMAIL
				, USER_PHONE
				, USER_FIRST_ADDR
				, USER_SECOND_ADDR
				, LAST_CONTACT_FMT_DT
		 FROM USER_INFO
		WHERE
			USER_ID = #{userId}
			AND
			USER_PW = #{userPw}
	</select>

	<!-- 아이디 찾기 -->
	<select id="find_id" parameterType="String" resultType="String">
		SELECT	USER_ID
			FROM USER_INFO
			WHERE USER_PHONE = #{userPhone}
		/* co.kr.fourteen.ese.login.mapper.EseUserMapper */
	</select>

	<!-- 비밀번호 초기화 -->
	<select id="findEmailByUserId" resultType="string">
		SELECT USER_EMAIL
		FROM USER_INFO
		WHERE USER_ID = #{userId}
	</select>

	<update id="updatePassword" parameterType="map">
		UPDATE USER_INFO
		SET USER_PW = #{password}
		WHERE USER_ID = #{userId}
	</update>

	<select id="selectOtpCodeCheck" parameterType="String" resultType="String">
		SELECT OTP_KEY
			FROM OTP_INFO
		WHERE USER_ID = #{value}
	</select>

	<select id="selectUserLoginCheck" parameterType="co.kr.fourteen.ese.login.vo.EseLoginVo" resultType="co.kr.fourteen.ese.login.vo.EseLoginVo">
		SELECT	REGIST_NO
			, USER_ID
			, USER_PW
			, TMPR_PW_NO
			, USER_NM
			, USER_EMAIL
			, USER_PHONE
			, USER_LEVEL
			, USER_DEL_YN
			, USER_DEL_DE
			, PW_CHANGE_DT
			, PW_FAIL_CNT
			, USER_FIRST_ADDR
			, USER_SECOND_ADDR
			, LAST_CONTACT_FMT_DT
			, USE_YN
			, PW_CHG_YN
			, ID_BLOCK_YN
			, ID_BLOCK_REASON
			, OTP_YN
			, MOD_DE
		FROM USER_INFO
		<include refid="selectUserWhere" />
	</select>

	<!-- TODO Merge문 공부 -->
	<insert id="otpMerge" parameterType="co.kr.fourteen.ese.login.vo.EseLoginVo">
		MERGE INTO OTP_INFO
			USING DUAL
			ON(USER_ID = #{userId })
		WHEN MATCHED THEN
			UPDATE SET
				USER_EMAIL = #{userEmail }
				, OTP_KEY = #{otpKey }
				, OTP_URL = #{otpUrl }
				, UPDATE_DT = TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
		WHEN NOT MATCHED THEN
			INSERT (
				SEQ
				, USER_ID
				, USER_EMAIL
				, OTP_KEY
				, OTP_URL
				, REG_DT
			) VALUES (
				OTP_INFO_SEQ.NEXTVAL
				, #{userId }
				, #{userEmail }
				, #{otpKey }
				, #{otpUrl }
				, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
			)
	</insert>

	<update id="updateUserOtpYn" parameterType="co.kr.fourteen.ese.login.vo.EseLoginVo">
		UPDATE USER_INFO SET
		OTP_YN = 'Y'
		WHERE USER_ID = #{userId }
	</update>

</mapper>